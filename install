#!/bin/bash
LOGFILE="/var/log/doorbelldinstaller.log"
RETAIN_NUM_LINES=500


function logsetup {
    TMP=$(tail -n $RETAIN_NUM_LINES $LOGFILE 2>/dev/null) && echo "${TMP}" > $LOGFILE
    exec > >(tee -a $LOGFILE)
    exec 2>&1
}

function log {
	echo "[$(date --rfc-3339=seconds)]: $*"
	echo "[$(date --rfc-3339=seconds)]: $*" 
}

function calc_wt_size() {
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=100
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

function do_get_port() {
	while true; do
		PORT=$(whiptail --inputbox "TCP Port number" 8 78 $PORT --title "TCP PORT" 3>&1 1>&2 2>&3)
		if [ $PORT -gt 65535 ] || [ $PORT -lt 1024 ]; then
			log "TCP port not in range. Port: $PORT"
			whiptail --title "ERROR" --msgbox "TCP port not in range. Port: $PORT" 20 60
		else
			break
		fi
	done
}

function do_doorbell_install() {
	while true; do
		LED=$(whiptail --inputbox "GPIO pin for LED? (using BCM numbering scheme)" 8 78 $LED --title "LED pin" 3>&1 1>&2 2>&3)
		if [ $LED -gt 26 ] || [ $LED -lt 2 ]; then
			log "Wrong pin number. Please use BCM pin numbering. LED PIN $LED"
			whiptail --title "ERROR" --msgbox "Wrong pin number. Please use BCM pin numbering." 20 60
		else
			break
		fi
	done

	while true; do
		BUTTON=$(whiptail --inputbox "GPIO pin for BUTTON? (using BCM numbering scheme)" 8 78 $BUTTON --title "BUTTON pin" 3>&1 1>&2 2>&3)
		if [ $BUTTON -gt 26 ] || [ $BUTTON -lt 2 ]; then
			log "Wrong pin number. Please use BCM pin numbering. BUTTON PIN $BUTTON"
			whiptail --title "ERROR" --msgbox "Wrong pin number. Please use BCM pin numbering." 20 60
		else
			break
		fi
	done

	while true; do
		HOSTS=$(whiptail --inputbox "Enter the IPs that should be chimed. Multiple hosts are separated ith a comma." 8 78 $HOSTS --title "Chimer HOSTS" 3>&1 1>&2 2>&3)
		if ! [[ $HOSTS =~ ^(([0-9]{1,3}\.){3}[0-9]{1,3})(,(([0-9]{1,3}\.){3}[0-9]{1,3}))*$ ]] ; then
			log "IPs not valid. Mutliple IPs must be separated by commas HOSTS: $HOSTS"
			whiptail --title "ERROR" --msgbox "IPs not valid. Mutliple IPs must be separated by commas." 20 60
		else
			HOSTS=[$HOSTS]
			HOSTS=${HOSTS/\[/\[\"}
			HOSTS=${HOSTS/\]/\"\]}
			HOSTS=${HOSTS/,/\",\"}
			if ! [[ $HOSTS =~ ^\[\"(([0-9]{1,3}\.){3}[0-9]{1,3})(\",\"(([0-9]{1,3}\.){3}[0-9]{1,3}))*\"\]$ ]] ; then
				log "IPs not valid: borked by variable pythonisation process. HOSTS: $HOSTS"
				exit 1
			fi
			break
		fi
	done

	do_get_port

	cp doorbelld.py $INSTALL_LOC/doorbelld/doorbelld.py
	chmod 644 $INSTALL_LOC/doorbelld/doorbelld.py
	echo HOSTS=$HOSTS > $INSTALL_LOC/doorbelld/settings.py
	echo PORT=$PORT >> $INSTALL_LOC/doorbelld/settings.py
	echo BUTTON=$BUTTON >> $INSTALL_LOC/doorbelld/settings.py
	echo LED=$LED >> $INSTALL_LOC/doorbelld/settings.py
	echo INSTALLMODE=\"$INSTALLMODE\" >> $INSTALL_LOC/doorbelld/settings.py
	cp doorbelld.service /lib/systemd/system/doorbelld.service
	sed /lib/systemd/system/doorbelld.service -i -e "s/\/usr\/local\/bin/${INSTALL_LOC//\//\\\/}/"

	systemctl disable chimerd.service
	rm -f /lib/systemd/system/chimerd.service
	rm -rf $INSTALL_LOC/chimerd

	chmod 644 /lib/systemd/system/doorbelld.service
	systemctl daemon-reload
	systemctl enable doorbelld.service
}

function do_chimer_install() {
	do_get_port
	if (whiptail --title "USB Audio" --yesno "Are you using USB audio?" 8 78) then
		sed /lib/modprobe.d/aliases.conf -i -e "s/snd-usb-audio index=-2/snd-usb-audio index=0/"
		if ! [ grep -q "snd-usb-audio" /etc/modules ]; then
			echo snd-usb-audio >>/etc/modules
		fi
	fi
	cp doorbell.wav $INSTALL_LOC/chimerd/doorbell.wav
	cp chimer.py $INSTALL_LOC/chimerd/chimer.py
	chmod 644 $INSTALL_LOC/chimerd/chimer.py
	echo PORT=$PORT > $INSTALL_LOC/chimerd/settings.py
	echo INSTALLMODE=\"$INSTALLMODE\" >> $INSTALL_LOC/chimerd/settings.py
	cp chimerd.service /lib/systemd/system/chimerd.service
	sed /lib/systemd/system/chimerd.service -i -e "s/\/usr\/local\/bin/${INSTALL_LOC//\//\\\/}/"

	systemctl disable doorbelld.service
	rm -f /lib/systemd/system/doorbelld.service
	rm -rf $INSTALL_LOC/doorbelld

	chmod 644 /lib/systemd/system/chimerd.service
	systemctl daemon-reload
	systemctl enable chimerd.service
}

#------Script Checks------------------------
if [[ $EUID -ne 0 ]]; then
	log "This script must be run as root. Try 'sudo ./install'"
	exit 1
fi

if ! [ -e $LOGFILE ]; then
	touch $LOGFILE
fi

#----------Script Setup---------------------
logsetup
ALIASES=/lib/modprobe.d/aliases.conf
MODULES=/etc/modules
INSTALL_LOC=/usr/local/bin
PORT=5000
HOSTS=192.168.0.1
BUTTON=21
LED=19
INSTALLMODE=0
calc_wt_size


#----------Script Start---------------------
if [ -e $INSTALL_LOC/doorbelld/settings.py ] ;then
	source $INSTALL_LOC/doorbelld/settings.py
	HOSTS=${HOSTS/\[/}
	HOSTS=${HOSTS/\]/}
fi
if [ -e $INSTALL_LOC/chimerd/settings.py ] ;then
	source $INSTALL_LOC/chimerd/settings.py
fi

whiptail --title "Doorbelld Installation & Reconfiguration Tool" --msgbox "\
This script will (re)install or reconfigure the Doorbelld service on this host.\n
An installation must have at least one doorbell and can have one or many chimers. \
The doorbell should host a button and an LED. The chimer should have speakers attached.\
" 20 60

if [ $INSTALLMODE == "doorbell" ]; then
 DBBUT=ON
 CHBUT=OFF
elif [ $INSTALLMODE == "chimer" ]; then
 DBBUT=OFF
 CHBUT=ON
else
 CHBUT=OFF
 DBBUT=OFF
fi
INSTALLTYPE=$(whiptail --title "Doorbelld Installation & Reconfiguration Tool" --radiolist "Mode Selection" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
  "1 Doorbell" "Make this host the front door button" $DBBUT \
  "2 Chimer" "Make this host a chimer (multiple chimers per install)" $CHBUT 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
    exit 1
elif [ $RET -eq 0 ]; then
  case "$INSTALLTYPE" in
    1\ *) INSTALLMODE=doorbell ;;
    2\ *) INSTALLMODE=chimer ;;
    *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
  esac || whiptail --msgbox "There was an error running option $INSTALLTYPE" 20 60 1
else
  exit 1
fi

if  [ $INSTALLMODE == "doorbell" ]; then
	do_doorbell_install
elif [ $INSTALLMODE == "chimer" ]; then
	do_chimer_install
else
	log "Programmatic error; please investigate INSTALLMODE: $INSTALLMODE "
fi

if (whiptail --title "Reboot" --yesno "Install complete. Do you want to reboot?" 8 78) then
	reboot
fi
